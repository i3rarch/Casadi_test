#define NOMINMAX

#include <iostream>
#include <windows.h>
#include <memory>
#include <chrono>
#include <vector>
#include <iomanip>
#include "TrajectoryOptimizer.hpp"

struct ScenarioResult {
    std::string name;
    std::string objective;
    std::string aircraft_type;
    int flight_time_min;
    int fuel_consumption_kg;
    int computation_time_ms;
    double distance_km;
    double avg_speed_kmh;
    bool has_constraints;
    bool success;
};

void runScenario(const std::string& name, std::unique_ptr<TrajectoryOptimizer>& optimizer,
                 const std::string& objective, const std::map<std::string, double>& target,
                 const std::string& aircraft_type, std::vector<ScenarioResult>& results) {
    
    std::cout << "üõ©Ô∏è  " << name << " ";
    
    auto start = std::chrono::high_resolution_clock::now();
    
    ScenarioResult scenario;
    scenario.name = name;
    scenario.objective = objective;
    scenario.aircraft_type = aircraft_type;
    scenario.has_constraints = !optimizer->getConstraints().empty();
    scenario.success = false;
    
    try {
        TrajectoryResult result = optimizer->optimize4D(objective, target);
        
        auto end = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        
        if (result.computation_time > 0) {
            scenario.flight_time_min = (int)(result.total_flight_time / 60.0);
            scenario.fuel_consumption_kg = (int)result.fuel_consumption;
            scenario.computation_time_ms = duration.count();
            scenario.success = true;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            if (!result.positions.empty() && result.positions.size() >= 2) {
                auto& start_pos = result.positions[0];
                auto& end_pos = result.positions.back();
                scenario.distance_km = std::sqrt(
                    std::pow(end_pos[0] - start_pos[0], 2) + 
                    std::pow(end_pos[1] - start_pos[1], 2) + 
                    std::pow(end_pos[2] - start_pos[2], 2)
                ) / 1000.0;
                
                // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
                if (scenario.flight_time_min > 0) {
                    scenario.avg_speed_kmh = scenario.distance_km / (scenario.flight_time_min / 60.0);
                }
            }
            
            std::cout << "‚úÖ –í—Ä–µ–º—è: " << scenario.flight_time_min << " –º–∏–Ω, "
                      << "–†–∞—Å—Ö–æ–¥: " << scenario.fuel_consumption_kg << " –∫–≥, "
                      << "–í—ã—á–∏—Å–ª–µ–Ω–∏—è: " << scenario.computation_time_ms << " –º—Å" << std::endl;
            
            optimizer->exportTrajectory(result, name + "_trajectory.csv");
        } else {
            auto end = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
            scenario.computation_time_ms = duration.count();
            std::cout << "‚ùå –ù–µ—É–¥–∞—á–∞ (" << duration.count() << " –º—Å)" << std::endl;
        }
        
    } catch (std::exception& e) {
        auto end = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        scenario.computation_time_ms = duration.count();
        std::cout << "‚ùå –û—à–∏–±–∫–∞ (" << duration.count() << " –º—Å)" << std::endl;
    }
    
    results.push_back(scenario);
}

void printComparisonTable(const std::vector<ScenarioResult>& results) {
    std::cout << "\n" << std::string(120, '=') << std::endl;
    std::cout << "üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í" << std::endl;
    std::cout << std::string(120, '=') << std::endl;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    std::cout << std::left 
              << std::setw(20) << "–°—Ü–µ–Ω–∞—Ä–∏–π"
              << std::setw(12) << "–°–∞–º–æ–ª–µ—Ç"
              << std::setw(10) << "–¶–µ–ª—å"
              << std::setw(8) << "–í—Ä–µ–º—è"
              << std::setw(10) << "–†–∞—Å—Ö–æ–¥"
              << std::setw(10) << "–î–∏—Å—Ç–∞–Ω—Ü–∏—è"
              << std::setw(12) << "–°—Ä.—Å–∫–æ—Ä–æ—Å—Ç—å"
              << std::setw(12) << "–í—ã—á–∏—Å–ª–µ–Ω–∏—è"
              << std::setw(12) << "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
              << std::setw(8) << "–°—Ç–∞—Ç—É—Å"
              << std::endl;
    
    std::cout << std::left 
              << std::setw(20) << ""
              << std::setw(12) << ""
              << std::setw(10) << ""
              << std::setw(8) << "(–º–∏–Ω)"
              << std::setw(10) << "(–∫–≥)"
              << std::setw(10) << "(–∫–º)"
              << std::setw(12) << "(–∫–º/—á)"
              << std::setw(12) << "(–º—Å)"
              << std::setw(12) << ""
              << std::setw(8) << ""
              << std::endl;
    
    std::cout << std::string(120, '-') << std::endl;
    
    // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    for (const auto& result : results) {
        std::cout << std::left 
                  << std::setw(20) << result.name.substr(0, 19)
                  << std::setw(12) << result.aircraft_type
                  << std::setw(10) << result.objective;
        
        if (result.success) {
            std::cout << std::setw(8) << result.flight_time_min
                      << std::setw(10) << result.fuel_consumption_kg
                      << std::setw(10) << std::fixed << std::setprecision(0) << result.distance_km
                      << std::setw(12) << std::fixed << std::setprecision(0) << result.avg_speed_kmh
                      << std::setw(12) << result.computation_time_ms
                      << std::setw(12) << (result.has_constraints ? "–î–∞" : "–ù–µ—Ç")
                      << std::setw(8) << "‚úÖ";
        } else {
            std::cout << std::setw(8) << "-"
                      << std::setw(10) << "-"
                      << std::setw(10) << "-"
                      << std::setw(12) << "-"
                      << std::setw(12) << result.computation_time_ms
                      << std::setw(12) << (result.has_constraints ? "–î–∞" : "–ù–µ—Ç")
                      << std::setw(8) << "‚ùå";
        }
        std::cout << std::endl;
    }
    
    std::cout << std::string(120, '-') << std::endl;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    int successful_runs = 0;
    int total_time = 0;
    int total_fuel = 0;
    double total_distance = 0;
    int total_computation = 0;
    
    for (const auto& result : results) {
        if (result.success) {
            successful_runs++;
            total_time += result.flight_time_min;
            total_fuel += result.fuel_consumption_kg;
            total_distance += result.distance_km;
        }
        total_computation += result.computation_time_ms;
    }
    
    std::cout << "\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:" << std::endl;
    std::cout << "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << successful_runs << "/" << results.size() 
              << " (" << (successful_runs * 100 / results.size()) << "%)" << std::endl;
    
    if (successful_runs > 0) {
        std::cout << "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞: " << (total_time / successful_runs) << " –º–∏–Ω" << std::endl;
        std::cout << "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: " << (total_fuel / successful_runs) << " –∫–≥" << std::endl;
        std::cout << "‚Ä¢ –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: " << std::fixed << std::setprecision(0) << total_distance << " –∫–º" << std::endl;
    }
    
    std::cout << "‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << (total_computation / 1000.0) << " —Å–µ–∫" << std::endl;
    std::cout << "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << (total_computation / results.size()) << " –º—Å" << std::endl;
    
    // –ù–∞–π–¥–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (successful_runs > 0) {
        auto fastest_flight = *std::min_element(results.begin(), results.end(),
            [](const ScenarioResult& a, const ScenarioResult& b) {
                return a.success && (!b.success || a.flight_time_min < b.flight_time_min);
            });
        
        auto most_efficient = *std::min_element(results.begin(), results.end(),
            [](const ScenarioResult& a, const ScenarioResult& b) {
                return a.success && (!b.success || a.fuel_consumption_kg < b.fuel_consumption_kg);
            });
        
        auto fastest_computation = *std::min_element(results.begin(), results.end(),
            [](const ScenarioResult& a, const ScenarioResult& b) {
                return a.success && (!b.success || a.computation_time_ms < b.computation_time_ms);
            });
        
        std::cout << "\nüèÜ –õ–£–ß–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:" << std::endl;
        std::cout << "‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø–æ–ª–µ—Ç: " << fastest_flight.name 
                  << " (" << fastest_flight.flight_time_min << " –º–∏–Ω)" << std::endl;
        std::cout << "‚Ä¢ –°–∞–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π: " << most_efficient.name 
                  << " (" << most_efficient.fuel_consumption_kg << " –∫–≥)" << std::endl;
        std::cout << "‚Ä¢ –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: " << fastest_computation.name 
                  << " (" << fastest_computation.computation_time_ms << " –º—Å)" << std::endl;
    }
    
    std::cout << std::string(120, '=') << std::endl;
}

void demonstrateFlightScenarios() {
    std::cout << "üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–ò–ê–¶–ò–û–ù–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í\n" << std::endl;
    
    std::vector<ScenarioResult> results;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–≤–∏–∞–ª–∞–π–Ω–µ—Ä–∞
    SystemParams aircraft(180000.0, 400000.0, 800000.0, 280.0, 1000.0, 13000.0);
    OptimizationParams optimization(20, 0.0, "ipopt");
    
    auto optimizer = std::make_unique<TrajectoryOptimizer>(aircraft, optimization);
    
    // 1. –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–π—Å (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞)
    optimizer->clearConstraints();
    runScenario("short_haul_fuel", optimizer, "fuel", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 3000.0}, 
        {"xf", 150000.0}, {"yf", 100000.0}, {"zf", 8000.0}
    }, "–ê–≤–∏–∞–ª–∞–π–Ω–µ—Ä", results);
    
    // 2. –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Å (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    runScenario("medium_haul_time", optimizer, "time", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 3000.0}, 
        {"xf", 300000.0}, {"yf", 200000.0}, {"zf", 11000.0}
    }, "–ê–≤–∏–∞–ª–∞–π–Ω–µ—Ä", results);
    
    // 3. –î–∞–ª—å–Ω–∏–π —Ä–µ–π—Å (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
    runScenario("long_haul_balanced", optimizer, "balanced", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 3000.0}, 
        {"xf", 500000.0}, {"yf", 350000.0}, {"zf", 12000.0}
    }, "–ê–≤–∏–∞–ª–∞–π–Ω–µ—Ä", results);
    
    // 4. –í—ã—Å–æ–∫–æ–≥–æ—Ä–Ω—ã–π –ø–æ–ª–µ—Ç (—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    runScenario("high_altitude_energy", optimizer, "energy", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 5000.0}, 
        {"xf", 250000.0}, {"yf", 150000.0}, {"zf", 12500.0}
    }, "–ê–≤–∏–∞–ª–∞–π–Ω–µ—Ä", results);
    
    // 5. –ü–æ–ª–µ—Ç —Å –æ–¥–Ω–∏–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º
    optimizer->clearConstraints();
    optimizer->addConstraint(AirspaceConstraint::createSphere(
        125000.0, 75000.0, 7000.0, 15000.0, 0.0, INFINITY, "–ó–∞–ø—Ä–µ—Ç–Ω–∞—è –∑–æ–Ω–∞"));
    
    runScenario("obstacle_avoidance", optimizer, "balanced", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 3000.0}, 
        {"xf", 250000.0}, {"yf", 150000.0}, {"zf", 9000.0}
    }, "–ê–≤–∏–∞–ª–∞–π–Ω–µ—Ä", results);
    
    // 6. –¢—Ä–∞–Ω—Å—Å–æ–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–ª–µ—Ç
    SystemParams fighter(25000.0, 600000.0, 1200000.0, 600.0, 500.0, 18000.0);
    auto fighter_optimizer = std::make_unique<TrajectoryOptimizer>(fighter, optimization);
    fighter_optimizer->clearConstraints();
    
    runScenario("supersonic_flight", fighter_optimizer, "time", {
        {"x0", 0.0}, {"y0", 0.0}, {"z0", 8000.0}, 
        {"xf", 400000.0}, {"yf", 300000.0}, {"zf", 15000.0}
    }, "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å", results);
    
    // –ü–µ—á–∞—Ç–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    printComparisonTable(results);
}

int main() {
    SetConsoleOutputCP(CP_UTF8);
    
    demonstrateFlightScenarios();

    return 0;
}